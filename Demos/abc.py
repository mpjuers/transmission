# ---
# jupyter:
#   jupytext:
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.2'
#       jupytext_version: 1.1.2
#   kernelspec:
#     display_name: transmission
#     language: python
#     name: transmission3
# ---

# %% markdown [markdown]
# # Demonstration of parameter estimation using Approximate Bayesian Computation
#
#
#
#
#


# %%
from __future__ import print_function, division

import itertools
import pickle

import msprime as ms
import transmission as txmn
import numpy as np
import pandas as pd

# %matplotlib inline

# %reload_ext autoreload
# %autoreload 2
# %aimport transmission


# %% markdown [markdown]
#  First, simulate a data set. The `sim()` function in Transmission is the
#  workhorse function that simulates a geneaology given a set of parameters.
#  Generally, it is called by `ms_simulate()` and there is no reason to call
#  it directly, but here we can use it for a proof of concept.

# %%
eta = 0.15  # Exponent of 10 representing the multiplicative difference
            # between the host's mutation rate and the symbiont's.
tau = 0.75  # The fraction of new infections that result from vertical
            # transmission.
rho = 0.55  # The fraction of the population that is female.


prior_seed = 3
random_seed = 3
host_theta = 1        # Estimated from the host mitochondria.
npop = 30             # Number of populations
nchrom = 24           # Number of chromosomes sampled from each population.
host_Nm = 2
num_replicates = 30

# Create populations using msprime API
population_config = [ms.PopulationConfiguration(nchrom)
                     for _ in range(npop)]
# Gives population identity (0 -- npop - 1) to each sampled 
# chromosome, 0, 1, 2, ...
populations = np.repeat(range(npop), nchrom)

# The following takes a minute or so.
simulated_target = txmn.sim(
    (eta, tau, rho),
    host_theta=host_theta,
    host_Nm=host_Nm,
    population_config=population_config,
    populations=populations,
    stats=("fst_mean", "fst_sd", "pi_h"),
    num_replicates=num_replicates,
    random_seed=random_seed
)
                          
target_df = pd.DataFrame.from_records(
    np.array(simulated_target, dtype={"names": ("fst_mean", "fst_sd", "pi_h",
                                                "eta", "tau", "rho"),
                                      "formats": ['f8' for _ in range(6)]})
)
target_df

# %% [markdown]
# Load the sample prior dataset. This is generated from a uniform prior for
# $\tau$, $\rho \sim \mathrm{Beta}(10, 10)$, and $\eta \sim \mathrm{N}(0, 0.1)$.
# This can be generated by the included command line tool `transmission-priorgen`
# according to whatever priors you wish.

# %%
with open('../Data/priors_s-0-0.1_t-1-1_r-10-10_1e6.pickle', 'rb') as file:
    priors_array = pickle.load(file)
priors = pd.DataFrame.from_records(priors_array)
priors.head()  # Note: sigma should be eta. This has been corrected in
               # the software.
priors.rename(columns={'sigma': 'eta'}, inplace=True)

# The below is a necessary evil at this point, until I have better Pandas
# integration.
def rmfield( a, *fieldnames_to_remove ):
    return a[ [ name for name in a.dtype.names
               if name not in fieldnames_to_remove ] ]

priors.head()

abc_out = txmn.Abc(
    target=simulated_target[0:3],  # Get only the summary statistics from
                                   # target.
    # For now, Transmission isn't made to work directly with DataFrames,
    # instead, they must be changed to record arrays.
    param=rmfield(priors[['eta', 'tau', 'rho']].to_records(), 'index'),
    sumstat=rmfield(
        priors[['fst_mean', 'fst_sd', 'pi_h']].to_records(), 'index'
    )
)

# %%
